name: "Outputs in Github Action"
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'major.minor.patch'
        required: true
jobs:
  first_job:
    name: Erster Job
    runs-on: ubuntu-latest
    steps:
      - name: First Step from first Job
        id: job_1_step_1
        run: |
          echo "An dieser Stelle nehme ich das Inputfield für die weitere Verwendung als Output"
          echo "Das Inputfield kann via $""{{ github.event.inputs.version }} abgerufen werden und enthält aktuell: ${{ github.event.inputs.version }}"
          echo ""
          echo "Nun schreibe ich den Inhalt von $""{{ github.event.inputs.version }} in die Outputs"
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          echo "In dem Step in welchem in die Outputs definiert wurden können diese nicht abgerufen werden"
          echo "Innerhalb dieses Steps wird $""{{ steps.job_1_step_1.outputs.version }} nicht ausgegeben:"
          echo ${{steps.job_1_step_1.outputs.version}}
          echo "Auch die globale Variable, welche nicht den Step sondern den Job als Referenz hat $""{{needs.first_job.outputs.version}}, wird nicht ausgegeben:"
          echo ${{needs.first_job.outputs.version}}
          echo "Daraus ergibt sich, dass innerhalb des Steps, in welcher das Output definiert wurde man sich mit Variablen behelfen muss:"
          echo "VERSION=$""{{ github.event.inputs.version }}"
          VERSION=${{ github.event.inputs.version }}
          echo "Nun habe ich $""{{ github.event.inputs.version }} in $""VERSION geschrieben und diese enthält nun $VERSION"
          echo ""
          echo "Ich kann festhalten, dass innerhalb eines Steps eines Jobs die ein Wert in die Outputs geschrieben werden kann aber innerhalb des Steps eine extra Variable definiert werden muss um flexibel zu agieren."
      - name: Second Step from first Job
        id: job_1_step_2
        run: |
          echo "An dieser Stelle starte ich den 2 Step."
          echo "Innerhalb dieses Steps wird $""{{ steps.job_1_step_1.outputs.version }} ausgegeben:"
          echo ${{ steps.job_1_step_1.outputs.version }}
          echo "Solange ich in Step 1 von Job 1 nicht die Outputs explizit ausliefere funktioniert $""{{needs.first_job.outputs.version}} nicht."
          echo ${{needs.first_job.outputs.version}}
          echo "Deswegen lege ich mal einen zweiten Job an und definiere dort die Outputs bereits im Job selbst."
  second_job:
    name: Zweiter Job
    needs: first_job
    runs-on: ubuntu-latest
    steps:
      - name: First Step from second Job
        id: job_2_step_1
        run: |
          echo "Ich beginne als erstes mal mit der Job-referenzierten Variable $""{{needs.first_job.outputs.version}}"
          echo ${{needs.first_job.outputs.version}}
          echo "Diese Ausgabe ist leer, da ich innerhalb vom ersten Job das Output nicht übergeben habe. Das möchte ich mal an dieser Stelle tun."
          echo "Nun schreibe ich den Inhalt von $""{{ github.event.inputs.version }} in die Outputs. Dieses mal habe ich auch in second_job die outputs übergeben."
          echo "version=${{github.event.inputs.version}}" >> $GITHUB_OUTPUT
    outputs:
      version: ${{ steps.job_2_step_1.outputs.version }}